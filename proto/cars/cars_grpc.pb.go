// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: cars.proto

package cars

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Cars_CreateCar_FullMethodName  = "/driveshare.proto.cars.Cars/CreateCar"
	Cars_EditCar_FullMethodName    = "/driveshare.proto.cars.Cars/EditCar"
	Cars_DeleteCar_FullMethodName  = "/driveshare.proto.cars.Cars/DeleteCar"
	Cars_GetAllCars_FullMethodName = "/driveshare.proto.cars.Cars/GetAllCars"
	Cars_GetCarById_FullMethodName = "/driveshare.proto.cars.Cars/GetCarById"
)

// CarsClient is the client API for Cars service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CarsClient interface {
	CreateCar(ctx context.Context, in *Car, opts ...grpc.CallOption) (*CarResponse, error)
	EditCar(ctx context.Context, in *Car, opts ...grpc.CallOption) (*CarResponse, error)
	DeleteCar(ctx context.Context, in *Car, opts ...grpc.CallOption) (*CarResponse, error)
	GetAllCars(ctx context.Context, in *CarRequest, opts ...grpc.CallOption) (*CarResponse, error)
	GetCarById(ctx context.Context, in *Car, opts ...grpc.CallOption) (*CarResponse, error)
}

type carsClient struct {
	cc grpc.ClientConnInterface
}

func NewCarsClient(cc grpc.ClientConnInterface) CarsClient {
	return &carsClient{cc}
}

func (c *carsClient) CreateCar(ctx context.Context, in *Car, opts ...grpc.CallOption) (*CarResponse, error) {
	out := new(CarResponse)
	err := c.cc.Invoke(ctx, Cars_CreateCar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carsClient) EditCar(ctx context.Context, in *Car, opts ...grpc.CallOption) (*CarResponse, error) {
	out := new(CarResponse)
	err := c.cc.Invoke(ctx, Cars_EditCar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carsClient) DeleteCar(ctx context.Context, in *Car, opts ...grpc.CallOption) (*CarResponse, error) {
	out := new(CarResponse)
	err := c.cc.Invoke(ctx, Cars_DeleteCar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carsClient) GetAllCars(ctx context.Context, in *CarRequest, opts ...grpc.CallOption) (*CarResponse, error) {
	out := new(CarResponse)
	err := c.cc.Invoke(ctx, Cars_GetAllCars_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carsClient) GetCarById(ctx context.Context, in *Car, opts ...grpc.CallOption) (*CarResponse, error) {
	out := new(CarResponse)
	err := c.cc.Invoke(ctx, Cars_GetCarById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CarsServer is the server API for Cars service.
// All implementations must embed UnimplementedCarsServer
// for forward compatibility
type CarsServer interface {
	CreateCar(context.Context, *Car) (*CarResponse, error)
	EditCar(context.Context, *Car) (*CarResponse, error)
	DeleteCar(context.Context, *Car) (*CarResponse, error)
	GetAllCars(context.Context, *CarRequest) (*CarResponse, error)
	GetCarById(context.Context, *Car) (*CarResponse, error)
	mustEmbedUnimplementedCarsServer()
}

// UnimplementedCarsServer must be embedded to have forward compatible implementations.
type UnimplementedCarsServer struct {
}

func (UnimplementedCarsServer) CreateCar(context.Context, *Car) (*CarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCar not implemented")
}
func (UnimplementedCarsServer) EditCar(context.Context, *Car) (*CarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditCar not implemented")
}
func (UnimplementedCarsServer) DeleteCar(context.Context, *Car) (*CarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCar not implemented")
}
func (UnimplementedCarsServer) GetAllCars(context.Context, *CarRequest) (*CarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCars not implemented")
}
func (UnimplementedCarsServer) GetCarById(context.Context, *Car) (*CarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarById not implemented")
}
func (UnimplementedCarsServer) mustEmbedUnimplementedCarsServer() {}

// UnsafeCarsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CarsServer will
// result in compilation errors.
type UnsafeCarsServer interface {
	mustEmbedUnimplementedCarsServer()
}

func RegisterCarsServer(s grpc.ServiceRegistrar, srv CarsServer) {
	s.RegisterService(&Cars_ServiceDesc, srv)
}

func _Cars_CreateCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Car)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarsServer).CreateCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cars_CreateCar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarsServer).CreateCar(ctx, req.(*Car))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cars_EditCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Car)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarsServer).EditCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cars_EditCar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarsServer).EditCar(ctx, req.(*Car))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cars_DeleteCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Car)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarsServer).DeleteCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cars_DeleteCar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarsServer).DeleteCar(ctx, req.(*Car))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cars_GetAllCars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarsServer).GetAllCars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cars_GetAllCars_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarsServer).GetAllCars(ctx, req.(*CarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cars_GetCarById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Car)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarsServer).GetCarById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cars_GetCarById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarsServer).GetCarById(ctx, req.(*Car))
	}
	return interceptor(ctx, in, info, handler)
}

// Cars_ServiceDesc is the grpc.ServiceDesc for Cars service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cars_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "driveshare.proto.cars.Cars",
	HandlerType: (*CarsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCar",
			Handler:    _Cars_CreateCar_Handler,
		},
		{
			MethodName: "EditCar",
			Handler:    _Cars_EditCar_Handler,
		},
		{
			MethodName: "DeleteCar",
			Handler:    _Cars_DeleteCar_Handler,
		},
		{
			MethodName: "GetAllCars",
			Handler:    _Cars_GetAllCars_Handler,
		},
		{
			MethodName: "GetCarById",
			Handler:    _Cars_GetCarById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cars.proto",
}
